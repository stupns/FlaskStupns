#Arch folder structure

FlaskStupns ↓  ## repos
- requirements.txt
- .gitignore
- blog ↓
- - config.py
- - main.py
- - .flaskenv
- - app ↓
- - - __init__.py
- - - routes.py
- - - models.py





1. pip install flask, python-dotenv
1.1 add libs to requirements
1.2 update .gitignore
2. main.py :

from app import app

2.1 config.py :

BASEDIR = os.path.abspath(os.path.dirname(__file__))

2.2 app.__init__.py :

from flask import Flask
from app.routes import main_rout

app = Flask(__name__)
app.register_blueprint(main_rout)

2.3 app.routes.py :

from flask import Blueprint
main_rout = Blueprint('main_rout', __name__)


@main_rout.route('/')
@main_rout.route('/index')
def index():
    return "Hello, World!"

2.4 .slaskenv :

FLASK_APP=main.py

# TEMPLATES

1. Create branch templates:

git checkout -b templates

2. Create template folders and html files:
app.static
app.templates
- base.html
- index.html

3. Add block to base and fill index data
4. routes.py :

main_rout = Blueprint('main_rout', __name__,
                      template_folder='templates',
                      static_folder='static')

def index():
    user = {'username': 'Serhii'}
    posts = [
        {
            'author': {'username': 'Serhii'},
            'body': 'Beautiful day in Ukraine!'
        },
        {
            'author': {'username': 'Susan'},
            'body': 'The Avengers movie was so cool!'
        }
    ]
    return render_template('index.html', title='Home', user=user, posts=posts)

5.1 GIT:

git add *
git commit
git push origin templates

git checkout master
git merge templates
git push origin master

# Web forms:

pip install flask-wtf

6. DB
pip install flask-sqlalchemy
pip install flask-migrate

6.1 Flask-SQLAlchemy Configuration

config.py :
class Config(object):
    # ...
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \
        'sqlite:///' + os.path.join(basedir, 'app.db')
    SQLALCHEMY_TRACK_MODIFICATIONS = False

6.1.2 Update __init__.py:

...
db = SQLAlchemy(app)
migrate = Migrate(app, db)

from . import models

6.1.3  Create new models.
app/models.py :

from app import db

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), index=True, unique=True)
    email = db.Column(db.String(120), index=True, unique=True)
    password_hash = db.Column(db.String(128))

    def __repr__(self):
        return '<User {}>'.format(self.username)

6.2 Creating The Migration Repository

flask db init
flask db migrate -m "users table"

6.3 The flask db migrate command does not make any changes to the database, it just generates the migration script.
To apply the changes to the database, the flask db upgrade command must be used.

flask db upgrade
(flask db downgrade) - canceled last migration

6.3 Add new Class to models and update User:

app/models.py :

class User(db.Model):
...
    posts = db.relationship('Post', backref='author', lazy='dynamic')

class Post(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    body = db.Column(db.String(140))
    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))

    def __repr__(self):
        return '<Post {}>'.format(self.body)

 6.3.1 Migrations

  flask db migrate -m "posts table"
  flask db upgrade

6.4 Playing with the Database
Open Console Python

>>> from app import db
>>> from app.models import User, Post
>>> u = User(username='john', email='john@example.com')
>>> db.session.add(u)
>>> db.session.commit()
>>> User.query.all()

6.5 GIT:

git add *
git commit
git push origin branch-db

git checkout master
git merge branch-db
git push origin master

7.0  USER LOGINS

git checkout -b branch-login

7.1 Password Hashing

shell :
'
>>> u = User(username='susan', email='susan@example.com')
>>> u.set_password('mypassword')
>>> u.check_password('anotherpassword')
False
>>> u.check_password('mypassword')
True
'

7.2 Pip install

pip install flask-login

app/__init__.py: Flask-Login initialization

7.3 Update models:

app/models.py: Flask-Login user mixin class

# ...
from flask_login import UserMixin

class User(UserMixin, db.Model):
    # ...

7.4 Update routes:
app/routes.py: Login view function logic
@main_rout.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('main_rout.index'))
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        if user is None or not user.check_password(form.password.data):
            flash('Invalid username or password')
            return redirect(url_for('main_rout.login'))
        login_user(user, remember=form.remember_me.data)
        return redirect(url_for('main_rout.index'))
    return render_template('login.html', title='Sign In', form=form)

@login.user_loader
def load_user(id):
    return User.query.get(int(id))

7.5 Logging Users Out

app/routes.py: Logout view function

# ...
from flask_login import logout_user

# ...

@app.route('/logout')
def logout():
    logout_user()
    return redirect(url_for('main_rout.index'))

7.6 Templates

app/templates/base.html: Conditional login and logout links

    <div>
        Microblog:
        <a href="{{ url_for('index') }}">Home</a>
        {% if current_user.is_anonymous %}
        <a href="{{ url_for('login') }}">Login</a>
        {% else %}
        <a href="{{ url_for('logout') }}">Logout</a>
        {% endif %}
    </div>

7.7 Requiring Users To Login

from flask import request
from werkzeug.urls import url_parse

@app.route('/login', methods=['GET', 'POST'])
def login():
    from app.models import User
    # ...
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        if user is None or not user.check_password(form.password.data):
            flash('Invalid username or password')
            return redirect(url_for('login'))
        login_user(user, remember=form.remember_me.data)
        next_page = request.args.get('next')
        if not next_page or url_parse(next_page).netloc != '':
            next_page = url_for('index')
        return redirect(next_page)
    # ...

    User Registration

app/forms.py: User registration form

from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, BooleanField, SubmitField
from wtforms.validators import ValidationError, DataRequired, Email, EqualTo
from app.models import User

# ...

class RegistrationForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired()])
    email = StringField('Email', validators=[DataRequired(), Email()])
    password = PasswordField('Password', validators=[DataRequired()])
    password2 = PasswordField(
        'Repeat Password', validators=[DataRequired(), EqualTo('password')])
    submit = SubmitField('Register')

    def validate_username(self, username):
        user = User.query.filter_by(username=username.data).first()
        if user is not None:
            raise ValidationError('Please use a different username.')

    def validate_email(self, email):
        user = User.query.filter_by(email=email.data).first()
        if user is not None:
            raise ValidationError('Please use a different email address.')
